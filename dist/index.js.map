{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import { Client, createClient, createSecureClient } from \"xmlrpc\";\n\nimport {\n    AbstractExecuteParams,\n    ExecuteKwParams,\n    GetAllCompaniesParams,\n    GetAllContactsParams,\n    GetCompanyParams,\n    GetContactParams,\n    OdooConfig,\n    RenderReportParams,\n    SaveCompanyParams,\n    SaveContactParams,\n} from \"./type\";\n\nclass Odoo {\n    config: OdooConfig;\n    host: string;\n    port: number;\n    db: string;\n    username: string;\n    password: string;\n    secure: boolean;\n    uid: number = 0;\n\n    constructor(config: OdooConfig) {\n        this.config = config;\n\n        const { hostname, port, protocol } = new URL(config.url);\n\n        this.host = hostname;\n        this.port = config.port || Number(port);\n        this.db = config.db;\n        this.username = config.username;\n        this.password = config.password;\n        this.secure = true;\n\n        if (protocol !== \"https:\") {\n            this.secure = false;\n        }\n        this.uid = 0;\n    }\n\n    private getClient(path: string): Client {\n        const createClientFn = this.secure ? createSecureClient : createClient;\n\n        return createClientFn({\n            host: this.host,\n            port: this.port,\n            path,\n        });\n    }\n\n    private methodCall(client: Client, method: string, params: any[] = []) {\n        return new Promise((resolve, reject) => {\n            client.methodCall(method, params, (err, value) => {\n                if (err) {\n                    console.log(err);\n                    return reject(err);\n                }\n\n                if (value.length == 1)\n                    return resolve(value[0])\n                else if (value.length > 0)\n                    return resolve(value);\n                else if (['read', 'search', 'search_read'].includes(params[4]))\n                    return reject(\"Not found\")\n                else\n                    return resolve(value);\n            });\n        });\n    }\n\n    connect(): Promise<number> {\n        const client = this.getClient(\"/xmlrpc/2/common\");\n\n        return new Promise((resolve, reject) => {\n            client.methodCall(\n                \"authenticate\",\n                [this.db, this.username, this.password, {}],\n                (error, value) => {\n                    if (error) {\n                        return reject(error);\n                    }\n\n                    if (!value) {\n                        return reject(new Error(\"No UID returned from authentication.\"));\n                    }\n\n                    this.uid = value;\n\n                    return resolve(this.uid);\n                }\n            );\n        });\n    }\n\n    async execute<T = any>({ client, endpoint, params }: AbstractExecuteParams) {\n        try {\n            const value = await this.methodCall(client, endpoint, [\n                this.db,\n                this.uid,\n                this.password,\n                ...params,\n            ]);\n\n            return Promise.resolve(value as T);\n        } catch (error) {\n            return Promise.reject(error);\n        }\n    }\n\n    async execute_kw<T = any>({\n        model,\n        method,\n        params,\n    }: ExecuteKwParams): Promise<T> {\n        const client = this.getClient(\"/xmlrpc/2/object\");\n\n        return this.execute<T>({\n            client,\n            endpoint: \"execute_kw\",\n            params: [model, method, ...params],\n        });\n    }\n\n    async exec_workflow<T = any>({\n        model,\n        method,\n        params,\n    }: ExecuteKwParams): Promise<T> {\n        const client = this.getClient(\"/xmlrpc/2/object\");\n\n        return this.execute<T>({\n            client,\n            endpoint: \"exec_workflow\",\n            params: [model, method, ...params],\n        });\n    }\n\n    async render_report<T = any>({\n        report,\n        params,\n    }: RenderReportParams): Promise<T> {\n        const client = this.getClient(\"/xmlrpc/2/report\");\n\n        return this.execute<T>({\n            client,\n            endpoint: \"render_report\",\n            params: [report, ...params],\n        });\n    }\n\n    async getAllContacts<T = any>({\n        fields = ['name', 'phone', 'email', 'company_name', 'function'],\n        isCompany = false\n    }: GetAllContactsParams): Promise<T> {\n        return this.execute_kw<T>({\n            model: \"res.partner\",\n            method: \"search_read\",\n            params: [\n                [[[\"is_company\", \"=\", isCompany]],\n                    fields]\n            ]\n        })\n    }\n\n    async getAllCompanies<T = any>({\n        fields = ['name', 'phone', 'email', 'country_id'],\n    }: GetAllCompaniesParams): Promise<T> {\n        return this.getAllContacts<T>({\n            fields: fields,\n            isCompany: true\n        })\n    }\n\n    async getContact<T = any>({\n        name,\n        fields = ['name', 'phone', 'email', 'company_name', 'function'],\n        isCompany = false\n    }: GetContactParams): Promise<T> {\n        return this.execute_kw<T>({\n            model: \"res.partner\",\n            method: \"search_read\",\n            params: [\n                [[[\"is_company\", \"=\", isCompany], [\"name\", \"like\", name]],\n                    fields]\n            ]\n        })\n    }\n\n    async getCompany<T = any>({\n        name,\n        fields = ['name', 'phone', 'email', 'country_id'],\n    }: GetCompanyParams): Promise<T> {\n        return this.getContact<T>({\n            name: name,\n            fields: fields,\n            isCompany: true\n        })\n    }\n\n    async saveContact<T = any>({\n        name,\n        phone,\n        email,\n        company,\n        title,\n        company_id,\n        address,\n    }: SaveContactParams): Promise<T> {\n\n        var contact = {\n            name: name,\n            phone: phone,\n            email: email,\n            company_name: company,\n            company_id: company_id || null,\n            function: title,\n        };\n\n        try {\n            const record = await this.execute_kw<T>({\n                model: \"res.partner\",\n                method: \"search\",\n                params: [\n                    [[[\"is_company\", \"=\", false], [\"name\", \"=\", name]]]\n                ]\n            })\n\n            this.execute_kw<T>({\n                model: \"res.partner\",\n                method: \"write\",\n                params: [[record, contact]],\n            });\n\n            return Promise.resolve(record as T)\n        } catch (err) {\n            if (err === \"Not found\") {\n                return this.execute_kw({\n                    model: \"res.partner\",\n                    method: \"create\",\n                    params: [[[contact]]],\n                });\n            } else\n                return Promise.reject(\"Error\")\n\n        }\n    }\n\n    async saveCompany<T = any>({\n        name,\n        phone,\n        email,\n        address,\n    }: SaveCompanyParams): Promise<T> {\n\n        const contact = {\n            name: name,\n            phone: phone,\n            email: email,\n            is_company: true\n        };\n\n        try {\n            const record = await this.execute_kw<T>({\n                model: \"res.partner\",\n                method: \"search\",\n                params: [\n                    [[[\"is_company\", \"=\", true], [\"name\", \"=\", name]]]\n                ]\n            })\n\n            this.execute_kw<T>({\n                model: \"res.partner\",\n                method: \"write\",\n                params: [[record, contact]],\n            });\n\n            return Promise.resolve(record as T)\n        } catch (err) {\n            if (err === \"Not found\") {\n                return this.execute_kw({\n                    model: \"res.partner\",\n                    method: \"create\",\n                    params: [[[contact]]],\n                });\n            } else\n                return Promise.reject(\"Error\")\n\n        }\n    }\n\n}\n\nexport default Odoo;"],"mappings":"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","names":[]}